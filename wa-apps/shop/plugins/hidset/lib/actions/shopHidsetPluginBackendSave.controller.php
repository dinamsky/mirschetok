<?php

class shopHidsetPluginBackendSaveController extends waJsonController
{
    protected $plugin;
    protected $error_string;

    public function execute()
    {
        $hsets = $this->plugin->hsets;
        $allsets = wa('shop')->getConfig()->getOption(null);
        $data = waRequest::post();
        foreach ($data['shop'] as $key => $value) {
            $allsets[$key] = $this->checkValue($hsets, $key, $value);
        }

        if (!$this->error_string) {
            $config = $this->getConfig();
            $config_file = $config->getConfigPath('config.php');
            try {
                waUtils::varExportToFile($allsets, $config_file);
            } catch (Exception $e) {
                waLog::log($e->getMessage());
            }
        } else {
            $this->setError($this->error_string);
            return;
        }

        $plugin_sets = $this->plugin->plugins;
        if (ifempty($data['plugins'])) {
            foreach ($data['plugins'] as $plugin_id => $sets) {
                if (!isset($plugin_sets[$plugin_id])) continue;
                $plugin_config = $this->plugin->getPluginConfig($plugin_id);
                foreach ($sets as $key => $value) {
                    $plugin_config[$key] = $this->checkValue($plugin_sets[$plugin_id], $key, $value);
                }
                if (!$this->error_string) {
                    $file_path = wa('shop')->getConfigPath('shop/plugins/' . $plugin_id) . '/config.php';
                    try {
                        if(!realpath(dirname($file_path))){
                            waFiles::create(wa('shop')->getConfigPath('shop/plugins/' . $plugin_id));
                        }
                        waUtils::varExportToFile($plugin_config, $file_path);
                    } catch (Exception $e) {
                        waLog::log($e->getMessage());
                    }
                } else {
                    $this->setError($this->error_string);
                    return;
                }
            }
        }

    }

    private function checkValue($sets, $key, $value)
    {
        switch ($sets[$key]['type']) {
            case 'int':
                if (self::checkInt($key, $value)) {
                    $this->error_string .= $key . ' ';
                } else {
                    $value = intval($value);
                }
                break;
            case 'select':
                if ($value === 'true') {
                    $value = true;
                }
                if ($value === 'false') {
                    $value = false;
                }
                break;
            case 'array':
                $values = [];
                foreach ($value as $akey => $avalue) {
                    if (self::checkInt($key, $avalue)) {
                        $this->error_string .= $key . ' ';
                        break 2;
                    } else {
                        $values[$akey] = intval($avalue);
                    }
                }
                $value = $values;
                break;
        }
        return $value;
    }

    private function checkInt($key, $value)
    {
        if (!(int)$value || (int)$value < 0 || (isset($plugin->hsets[$key]['limit']) && $value > $this->plugin->hsets[$key]['limit'])) {
            return $key;
        } else {
            return false;
        }
    }

    public function preExecute()
    {
        parent::preExecute(); // TODO: Change the autogenerated stub
        $this->plugin = wa()->getPlugin('hidset');
        $this->error_string = '';
    }
}